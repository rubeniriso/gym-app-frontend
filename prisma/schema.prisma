generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model exercises {
  exercise_id       Int               @id
  name              String?           @db.VarChar(100)
  body_part         String?           @db.VarChar(100)
  equipment         String?           @db.VarChar(100)
  gif_url           String?           @db.VarChar(255)
  target            String?           @db.VarChar(100)
  secondary_muscles String[]
  instructions      String[]
  sessionexercise   sessionexercise[]
}

model routines {
  routine_id                             Int           @id @default(autoincrement())
  name                                   String        @db.VarChar(100)
  description                            String?
  user_id                                Int?
  routinetype_id                         Int?
  routinetypes                           routinetypes? @relation(fields: [routinetype_id], references: [routinetype_id], onDelete: NoAction, onUpdate: NoAction)
  users_routines_user_idTousers          users?        @relation("routines_user_idTousers", fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  users_users_activeroutine_idToroutines users[]       @relation("users_activeroutine_idToroutines")
  weeks                                  weeks[]
}

model routinetypes {
  routinetype_id Int        @id(map: "systems_pkey") @default(autoincrement())
  name           String     @db.VarChar(255)
  description    String?
  icon_url       String?
  icon_alt_text  String?
  routines       routines[]
}

model sessionexercise {
  sessionexercise_id Int        @id @default(autoincrement())
  name               String?    @db.VarChar(100)
  sets               Int?
  reps               Int?
  weight             Int?
  rir                Int?
  session_id         Int?
  exercise_id        Int?
  exercises          exercises? @relation(fields: [exercise_id], references: [exercise_id], onDelete: Cascade, onUpdate: NoAction)
  sessions           sessions?  @relation(fields: [session_id], references: [session_id], onDelete: Cascade, onUpdate: NoAction)
}

model sessions {
  session_id      Int               @id @default(autoincrement())
  name            String            @db.VarChar(100)
  description     String?
  week_id         Int?
  sessionexercise sessionexercise[]
  weeks           weeks?            @relation(fields: [week_id], references: [week_id], onDelete: Cascade, onUpdate: NoAction)
}

model accounts {
  account_id        String  @id @default(cuid())
  user_id           Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user users @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model authsessions {
  authsession_id   String   @id @default(cuid())
  authsessionToken String   @unique
  user_id          Int
  expires          DateTime
  user             users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model users {
  user_id                                   Int            @id @default(autoincrement())
  name                                      String         @db.VarChar(100)
  email                                     String         @unique
  emailVerified                             DateTime?
  password                                  String         @db.VarChar(255)
  activeroutine_id                          Int?
  authsessions                              authsessions[]
  routines_routines_user_idTousers          routines[]     @relation("routines_user_idTousers")
  routines_users_activeroutine_idToroutines routines?      @relation("users_activeroutine_idToroutines", fields: [activeroutine_id], references: [routine_id], onUpdate: NoAction)
  accounts                                  accounts[]
}

model weeks {
  week_id     Int        @id @default(autoincrement())
  name        String     @db.VarChar(100)
  description String?
  routine_id  Int?
  sessions    sessions[]
  routines    routines?  @relation(fields: [routine_id], references: [routine_id], onDelete: Cascade, onUpdate: NoAction)
}
